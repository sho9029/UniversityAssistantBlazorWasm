@page "/signin/{Parameter?}"
@inject IAuthService Auth
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Sign in</h3>
@if (!string.IsNullOrEmpty(Message))
{
    <p class="error-reason">@Message</p>
}
<TextField class="text-field" Label="Email" @bind-Value=@Email AutoComplete="AutoComplete.Email" OnKeyDown=@((e) => OnKeyDownAsync(e)) />
<TextField class="text-field" Label="Password" @bind-Value=@Password InputType="InputType.Password" OnKeyDown=@((e) => OnKeyDownAsync(e)) />
<br />
<DefaultButton Text="Sign in" OnClick=@(() => SubmitAsync()) Disabled="@Disabled" />
<p>or <Link Href="signup">sign up</Link></p>
@if (!String.IsNullOrEmpty(Error[0]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(0))>
        @Error[0]
	</MessageBar>
}
@if (!String.IsNullOrEmpty(Error[1]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(1))>
        @Error[1]
	</MessageBar>
}
@if (!String.IsNullOrEmpty(Error[2]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(2))>
        @Error[2]
	</MessageBar>
}

@code {
    [Parameter]
    public string Parameter { get; set; }
    private string Message;

    private string Email;
    private string Password;

    private bool _disabled = false;
    private bool Disabled
    {
        get
        {
            return String.IsNullOrEmpty(Email) || String.IsNullOrEmpty(Password) ? true : _disabled;
        }
        set
        {
            _disabled = value;
        }
    }

    private List<string> Error = new(3) { String.Empty, String.Empty, String.Empty };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnKeyDownAsync(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !Disabled)
        {
            await SubmitAsync();
        }
    }

    private async Task SubmitAsync()
    {
        Error = new(3) { String.Empty, String.Empty, String.Empty };
        Disabled = true;
        var result = await Auth.SignInAsync(new SignInModel() { Email = Email, Password = Password });
        if (result.IsSuccessful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error[2] = $"Firebase 認証エラー: {result.ErrorReason}";
        }
        Disabled = false;
    }

    private void OnDismiss(int index)
    {
        Error[index] = String.Empty;
    }

    protected override void OnParametersSet()
    {
        switch (Parameter)
        {
            case "token error":
            case "invalid token":
                Message = "トークンの期限が切れました。もう一度サインインしてください。";
                break;
            default:
                break;
        }

        Parameter = string.Empty;
        NavigationManager.NavigateTo("signin");
    }
}

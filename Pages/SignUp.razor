@page "/signup"
@inject IAuthService Auth
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Sign up</h3>
<TextField class="text-field" Label="Email" @bind-Value=@Email AutoComplete=@AutoComplete.Email OnKeyDown=@((e) => OnKeyDownAsync(e))/>
<TextField class="text-field" Label="Display name" @bind-Value=@DisplayName AutoComplete=@AutoComplete.Name OnKeyDown=@((e) => OnKeyDownAsync(e))/>
<TextField class="text-field" Label="Password (8~128文字で、半角英小文字, 大文字, 数字をそれぞれ1文字以上)" @bind-Value=@Password InputType=@InputType.Password OnKeyDown=@((e) => OnKeyDownAsync(e))/>
<br />
<DefaultButton Text="Sign up" OnClick=@(() => SubmitAsync()) Disabled="@Disabled" />
<p>or <Link Href="signin">sign in</Link></p>
@if (!string.IsNullOrEmpty(Error[0]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(0))>
        @Error[0]
	</MessageBar>
}
@if (!string.IsNullOrEmpty(Error[1]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(1))>
        @Error[1]
	</MessageBar>
}
@if (!string.IsNullOrEmpty(Error[2]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(2))>
        @Error[2]
	</MessageBar>
}
@if (!string.IsNullOrEmpty(Error[3]))
{
    <MessageBar MessageBarType="MessageBarType.Error" OnDismiss=@(() => OnDismiss(3))>
        @Error[3]
	</MessageBar>
}

@code {
    private bool isAvailableEmail = false;
    private string _email;
    private string Email
    {
        get
        {
            return _email;
        }
        set
        {
            _email = value;
            isAvailableEmail = IsEmail(value);
        }
    }

    private bool isAvailableDisplayName = false;
    private string _displayName;
    private string DisplayName
    {
        get
        {
            return _displayName;
        }
        set
        {
            _displayName = value;
            isAvailableDisplayName = IsDisplayName(value);
        }
    }

    private bool isAvailablePassword = false;
    private string _password;
    private string Password
    {
        get
        {
            return _password;
        }
        set
        {
            _password = value;
            isAvailablePassword = IsPassword(value);
        }
    }

    private bool _disabled = false;
    private bool Disabled
    {
        get
        {
            return string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(DisplayName) || string.IsNullOrWhiteSpace(Password) ? true : _disabled;
        }
        set
        {
            _disabled = value;
        }
    }

    private readonly Regex emailPattern = new ("^[-+.\\w]+@[a-z0-9]+(\\.[a-z0-9]+)*\\.[a-z]{2,6}$", RegexOptions.Compiled | RegexOptions.IgnoreCase),
        passwordPattern = new("^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])[!-~]{8,128}$", RegexOptions.Compiled);
    private List<string> Error = new(4) { string.Empty, string.Empty, string.Empty, string.Empty };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
        {
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private bool IsEmail(string email)
    {
        return emailPattern.IsMatch(email);
    }

    private bool IsDisplayName(string displayName)
    {
        return !string.IsNullOrWhiteSpace(displayName);
    }

    private bool IsPassword(string password)
    {
        return passwordPattern.IsMatch(password);
    }

    private async Task OnKeyDownAsync(KeyboardEventArgs e)
    {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !Disabled)
        {
            await SubmitAsync();
        }
    }

    private async Task SubmitAsync()
    {
        Error = new(4) { string.Empty, string.Empty, string.Empty, string.Empty };
        if (!isAvailableEmail || !isAvailableDisplayName || !isAvailablePassword)
        {
            if (!isAvailableEmail)
            {
                Error[0] = "使用できないメールアドレスです。";
            }
            if (!isAvailableDisplayName)
            {
                Error[1] = "表示名は空白にできません。";
            }
            if (!isAvailablePassword)
            {
                Error[2] = "パスワードは8~128文字で、半角英小文字, 大文字, 数字をそれぞれ1文字以上含む文字列にしてください。";
            }
            return;
        }
        Disabled = true;
        var result = await Auth.SignUpAsync(new SignInModel() { Email = Email, DisplayName = DisplayName, Password = Password });
        if (result.IsSuccessful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error[3] = $"Firebase 認証エラー: {result.ErrorReason}";
        }
        Disabled = false;
    }

    private void OnDismiss(int index)
    {
        Error[index] = string.Empty;
    }
}

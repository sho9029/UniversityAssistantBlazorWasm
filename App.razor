@inject IJSRuntime JSRuntime
@inject ThemeProvider ThemeProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
	<Theme>
		<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        <Redirect Uri="/signin" />
					</NotAuthorized>
				</AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <Redirect Uri="/" />
                </LayoutView>
            </NotFound>
        </Router>
        <LayerHost />
	</Theme>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (await JSRuntime.InvokeAsync<bool>("isDarkMode"))
        {
            ThemeProvider.UpdateTheme(new DefaultPaletteDark());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity.IsAuthenticated)
        {
            await SessionStorage.RemoveItemAsync("firebaseAuth");
        }
    }
}

@inject IJSRuntime JSRuntime
@inject ThemeProvider ThemeProvider
@inject ILocalStorageService LocalStorage

<CascadingAuthenticationState>
	<Theme>
		<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        <RedirectToSignIn />
					</NotAuthorized>
				</AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
        <LayerHost />
	</Theme>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (await JSRuntime.InvokeAsync<bool>("isDarkMode"))
        {
            ThemeProvider.UpdateTheme(new DefaultPaletteDark());
        }

        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("requestSubscription");
        if (subscription != null)
        {
            // TODO: Firebase データベースにデータを保存

            // BETA: ローカルストレージに保存
            await LocalStorage.SetItemAsync("endpoint", subscription.Url);
            await LocalStorage.SetItemAsync("p256dh", subscription.P256dh);
            await LocalStorage.SetItemAsync("auth", subscription.Auth);
        }
        await base.OnInitializedAsync();
    }
}

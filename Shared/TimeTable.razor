@inject IAuthService Auth
@inject ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager

<table class="table">
    <tbody class="time-table">
        @if (IsFilled)
        {
            var subjects = StartIndex == -1 ? Enumerable.Repeat("", 5).ToList() : Personal.Subjects.GetRange(StartIndex, 5);
            <tr>
                <td>1st<br>@Personal.StartTimes[0].ToString("HH:mm")~@Personal.EndTimes[0].ToString("HH:mm")</td>
                <td>@subjects[0]</td>
            </tr>
            <tr>
                <td>2nd<br>@Personal.StartTimes[1].ToString("HH:mm")~@Personal.EndTimes[1].ToString("HH:mm")</td>
                <td>@subjects[1]</td>
            </tr>
            <tr>
                <td>3rd<br>@Personal.StartTimes[2].ToString("HH:mm")~@Personal.EndTimes[2].ToString("HH:mm")</td>
                <td>@subjects[2]</td>
            </tr>
            <tr>
                <td>4th<br>@Personal.StartTimes[3].ToString("HH:mm")~@Personal.EndTimes[3].ToString("HH:mm")</td>
                <td>@subjects[3]</td>
            </tr>
            <tr>
                <td>5th<br>@Personal.StartTimes[4].ToString("HH:mm")~@Personal.EndTimes[4].ToString("HH:mm")</td>
                <td>@subjects[4]</td>
            </tr>
        }
        else
        {
            <tr>Loading</tr>
        }
    </tbody>
</table>

@code {
    private DatabaseProvider database;
    private bool IsFilled = false;
    private Personal Personal;
    private int StartIndex
    {
        get
        {
            var dayOfWeek = (int)DateTime.Now.DayOfWeek - 1;
            return dayOfWeek == -1 ? -1 : dayOfWeek * 5;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        database = new(Confidential.Firebase.DatabaseUrl,
            new FirebaseOptions
            {
                AuthTokenAsyncFactory = async () =>
                {
                    var token = await Auth.GetFreshTokenAsync();
                    await SessionStorage.SetItemAsync("authToken", token);
                    return token;
                }
            });
        await GetPersonalDataAsync();
        await InvokeAsync(new Action(() => StateHasChanged()));
    }

    private async Task GetPersonalDataAsync()
    {
        try
        {
            var uid = await Auth.GetUidAsync(await SessionStorage.GetItemAsync<string>("authToken"));
            var data = (await database.GetAsync<Personal>($"users/{uid}"))[0];
            Personal = new Personal
            {
                StartTimes = data.StartTimes,
                EndTimes = data.EndTimes,
                Subjects = data.Subjects
            };
            IsFilled = true;
        }
        catch (FirebaseException ex)
        {
            // トークンの期限切れ
            if (ex.ResponseData.Contains("expired"))
            {
                await NavigateToSignInAsync("token error");
            }
            else
            {
                Console.Error.WriteLine($"FirebaseException\n{ex.Message}");
            }
        }
        catch (FirebaseAuthException)
        {
            await NavigateToSignInAsync("invalid token");
        }
        catch (IndexOutOfRangeException)
        {
            // データが保存されていない時
            await InitializeDatabaseAsync();
        }
    }

    private async Task NavigateToSignInAsync(string reason)
    {
        await Auth.SignOutAsync();
        NavigationManager.NavigateTo($"/signin/{reason}");
    }

    private async Task InitializeDatabaseAsync()
    {
        try
        {
            var personal = new Personal
            {
                Subjects = Enumerable.Repeat("", 30).ToList(),
                StartTimes = new List<DateTime>(5)
                {
                    new DateTime(1, 1, 1, 9, 30, 0),
                    new DateTime(1, 1, 1, 11, 10, 0),
                    new DateTime(1, 1, 1, 13, 30, 0),
                    new DateTime(1, 1, 1, 15, 10, 0),
                    new DateTime(1, 1, 1, 16, 50, 0)
                },

                EndTimes = new List<DateTime>(5)
                {
                    new DateTime(1, 1, 1, 11, 0, 0),
                    new DateTime(1, 1, 1, 12, 40, 0),
                    new DateTime(1, 1, 1, 15, 0, 0),
                    new DateTime(1, 1, 1, 16, 40, 0),
                    new DateTime(1, 1, 1, 18, 20, 0)
                }
            };
            var uid = await Auth.GetUidAsync(await SessionStorage.GetItemAsync<string>("authToken"));
            await database.PutAsync($"users/{uid}/personal", personal);
        }
        catch (FirebaseException ex)
        {
            Console.Error.WriteLine(ex.Message);
        }

        await GetPersonalDataAsync();
    }
}

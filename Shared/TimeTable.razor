@inject IAuthService Auth
@inject ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager

<table class="table">
    <tbody class="time-table">
        @if (IsFilled)
        {
            var subjects = StartIndex == -1 ? Enumerable.Repeat("", 5).ToList() : Personal.Subjects.GetRange(StartIndex, 5);
            <tr>
                <td>1st<br>@Personal.StartTimes[0].ToString("HH:mm")~@Personal.EndTimes[0].ToString("HH:mm")</td>
                <td>@subjects[0]</td>
            </tr>
            <tr>
                <td>2nd<br>@Personal.StartTimes[1].ToString("HH:mm")~@Personal.EndTimes[1].ToString("HH:mm")</td>
                <td>@subjects[1]</td>
            </tr>
            <tr>
                <td>3rd<br>@Personal.StartTimes[2].ToString("HH:mm")~@Personal.EndTimes[2].ToString("HH:mm")</td>
                <td>@subjects[2]</td>
            </tr>
            <tr>
                <td>4th<br>@Personal.StartTimes[3].ToString("HH:mm")~@Personal.EndTimes[3].ToString("HH:mm")</td>
                <td>@subjects[3]</td>
            </tr>
            <tr>
                <td>5th<br>@Personal.StartTimes[4].ToString("HH:mm")~@Personal.EndTimes[4].ToString("HH:mm")</td>
                <td>@subjects[4]</td>
            </tr>
        }
        else
        {
            <tr>Loading</tr>
        }
    </tbody>
</table>

@code {
    private bool IsFilled = false;
    private Personal Personal;
    private int StartIndex
    {
        get
        {
            var dayOfWeek = (int)DateTime.Now.DayOfWeek - 1;
            return dayOfWeek == -1 ? -1 : dayOfWeek * 5;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await GetPersonalDataAsync();
        await InvokeAsync(new Action(() => StateHasChanged()));
    }

    private async Task GetPersonalDataAsync()
    {
        
    }

    private async Task NavigateToSignInAsync(string reason)
    {
        await Auth.SignOutAsync();
        NavigationManager.NavigateTo($"/signin/{reason}");
    }
}
